diff --git a/user/arraylist.c b/user/arraylist.c
index f78468a..fa3ac36 100644
--- a/user/arraylist.c
+++ b/user/arraylist.c
@@ -51,8 +51,12 @@ struct arraylist {
  */
 struct arraylist *al_new(void)
 {
-  /* TODO: Add your code here. */
-  return 0;
+  struct arraylist *list = malloc(sizeof(struct arraylist));
+  list -> list = malloc(sizeof(int)*DEF_ARRAY_LIST_CAPACITY);
+  list->size = 0;
+  list->capacity = DEF_ARRAY_LIST_CAPACITY;
+
+  return list;
 }
 
 /**
@@ -65,7 +69,8 @@ struct arraylist *al_new(void)
  */
 void al_free(struct arraylist *al)
 {
-  /* TODO: Add your code here. */
+  free((*al).list);
+  free(al);
 }
 
 /**
@@ -81,7 +86,16 @@ void al_free(struct arraylist *al)
 int al_get_at(struct arraylist *al, int pos)
 {
   /* TODO: Add your code here. */
-  return 0;
+  int val = -1;
+  if((al->size) <= pos || pos < 0)
+  {
+    val = -1;
+  }
+  else
+  {
+    val = *((al->list)+pos);
+  }
+  return val;
 }
 
 /**
@@ -99,6 +113,14 @@ int al_get_at(struct arraylist *al, int pos)
 void al_resize(struct arraylist *al)
 {
   /* TODO: Add your code here. */
+  int *new_list = malloc(sizeof(int) * al->capacity * 2); // allocate memory for the new list
+  for(int i = 0; i < al->size; i++) {
+      new_list[i] = al->list[i]; // copy elements from the old list to the new list
+  }
+  free(al->list); // free the old list
+  al->list = new_list; // set the pointer to the new list
+  al->capacity *= 2; // update the capacity of the struct
+
 }
 
 /**
@@ -117,6 +139,12 @@ void al_resize(struct arraylist *al)
 void al_append(struct arraylist *al, int val)
 {
   /* TODO: Add your code here. */
+  if (al->size == al->capacity) { // check if the list is already at capacity
+      al_resize(al); // if yes, resize the list
+  }
+  al->list[al->size] = val; // append the new element at the end of the list
+  al->size++; // update the size of the list
+  
 }
 
 /**
@@ -139,7 +167,7 @@ int main(int argc, char **argv)
 {
   struct arraylist *al;
 
-  /* test creating a new array list */
+  // /* test creating a new array list */
   al = al_new();
   rhassert(al != 0);
   rhassert_int_equals(al->size, 0);
diff --git a/user/find.c b/user/find.c
index 8f3fe28..05419b9 100644
--- a/user/find.c
+++ b/user/find.c
@@ -3,8 +3,73 @@
 #include "kernel/fs.h"
 #include "kernel/stat.h"
 
+void find(char *dir_name, char *file_name);
+
 int main(int argc, char **argv)
 {
   /* TODO: Insert your code here. */
+  if(argc != 3)
+  {
+    printf("usage: find <directory> <filename>\n");
+    exit(1);
+  }
+
+  find(argv[1], argv[2]);
+
   exit(0);
 }
+
+void find(char *dir_name, char *file_name)
+{
+  char buf[512], *p; 
+  int fd;
+  struct stat st;
+  struct dirent de;
+  
+  if((fd = open(dir_name, 0)) < 0)
+  {
+    fprintf(2, "find: cannot open %s\n", dir_name);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+    fprintf(2, "ls: cannot stat %s\n", dir_name);
+    close(fd);
+    return;
+  }
+
+  switch(st.type)
+  {
+
+    case T_DEVICE:
+      break;
+    case T_FILE:
+      break;
+    case T_DIR:
+      if(strlen(dir_name) + 1 + DIRSIZ + 1 > sizeof buf){
+        fprintf(2, "find: path too long\n");
+        break;
+      }
+      strcpy(buf, dir_name);
+      p = buf+strlen(buf);
+      *p++ = '/';
+      while(read(fd, &de, sizeof(de)) == sizeof(de)){
+        if(de.inum == 0)
+          continue;
+        memmove(p, de.name, DIRSIZ);
+        p[DIRSIZ] = 0;
+        if(stat(buf, &st) < 0){
+          fprintf(2, "find: cannot stat %s\n", buf);
+          continue;
+        }
+        if(strcmp(de.name, ".") == 0 || strcmp(de.name, "..") == 0)
+          continue;
+        if(st.type == T_FILE && strcmp(de.name, file_name) == 0)
+          printf("%s\n", buf);
+        else if(st.type == T_DIR)
+          find(buf, file_name);
+      }
+      break;
+  }
+
+}
\ No newline at end of file
diff --git a/user/sleep.c b/user/sleep.c
index 14aab29..62d2220 100644
--- a/user/sleep.c
+++ b/user/sleep.c
@@ -4,6 +4,13 @@
 int main(int argc, char **argv)
 {
   /* TODO: Insert your code here. */
+  if(argc < 2)
+  {
+    printf("Put the ticks to sleep. ex) sleep 10");
+    exit(1);
+  }
 
+  int ticks = atoi(argv[1]);
+  sleep(ticks);
   exit(0);
 }
